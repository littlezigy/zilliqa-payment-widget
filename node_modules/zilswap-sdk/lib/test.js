"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
var constants_1 = require("./constants");
var key = process.env.PRIVATE_KEY || undefined;
var zilswap = new index_1.Zilswap(constants_1.Network.TestNet, key);
var test = function () { return __awaiter(void 0, void 0, void 0, function () {
    var tx0, _a, _b, _c, tx1, _d, _e, _f, pool, remove25Percent, tx2, someSWTH, someZIL, r1, tx3, r2, tx4, r3, tx5, r4, tx6;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0: 
            // init
            return [4 /*yield*/, zilswap.initialize(printResults)
                // get app state
            ];
            case 1:
                // init
                _g.sent();
                // get app state
                console.log('\ninitial app state:\n');
                console.log(JSON.stringify(zilswap.getAppState(), null, 2));
                _g.label = 2;
            case 2:
                _g.trys.push([2, , 23, 25]);
                _b = (_a = zilswap).approveTokenTransferIfRequired;
                _c = ['SWTH'];
                return [4 /*yield*/, zilswap.toUnitless('SWTH', '100000')];
            case 3: return [4 /*yield*/, _b.apply(_a, _c.concat([_g.sent()]))];
            case 4:
                tx0 = _g.sent();
                if (!tx0) return [3 /*break*/, 6];
                console.log("\ntx hash: " + tx0.hash + "\n");
                return [4 /*yield*/, waitForTx()];
            case 5:
                _g.sent();
                _g.label = 6;
            case 6:
                _e = (_d = zilswap).addLiquidity;
                _f = ['SWTH'];
                return [4 /*yield*/, zilswap.toUnitless('ZIL', '10000')];
            case 7:
                _f = _f.concat([_g.sent()]);
                return [4 /*yield*/, zilswap.toUnitless('SWTH', '10000')];
            case 8: return [4 /*yield*/, _e.apply(_d, _f.concat([_g.sent()]))];
            case 9:
                tx1 = _g.sent();
                console.log("\ntx hash: " + tx1.hash + "\n");
                pool = zilswap.getPool('SWTH');
                remove25Percent = pool.userContribution.dividedToIntegerBy(4).toString();
                return [4 /*yield*/, zilswap.removeLiquidity('SWTH', remove25Percent)];
            case 10:
                tx2 = _g.sent();
                console.log("\ntx hash: " + tx2.hash + "\n");
                return [4 /*yield*/, zilswap.toUnitless('SWTH', '0.1')];
            case 11:
                someSWTH = _g.sent();
                return [4 /*yield*/, zilswap.toUnitless('ZIL', '0.1')
                    // get expected rates for exact input
                ];
            case 12:
                someZIL = _g.sent();
                return [4 /*yield*/, zilswap.getRatesForInput('SWTH', 'ZIL', someSWTH)];
            case 13:
                r1 = _g.sent();
                console.log('\n0.1 SWTH -> ZIL\n');
                console.log(JSON.stringify(r1, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactInput('SWTH', 'ZIL', someSWTH)];
            case 14:
                tx3 = _g.sent();
                console.log("\ntx hash: " + tx3.hash + "\n");
                return [4 /*yield*/, zilswap.getRatesForInput('ZIL', 'SWTH', someZIL)];
            case 15:
                r2 = _g.sent();
                console.log('\n0.1 ZIL -> SWTH\n');
                console.log(JSON.stringify(r2, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactInput('ZIL', 'SWTH', someZIL)];
            case 16:
                tx4 = _g.sent();
                console.log("\ntx hash: " + tx4.hash + "\n");
                return [4 /*yield*/, zilswap.getRatesForOutput('SWTH', 'ZIL', someZIL)];
            case 17:
                r3 = _g.sent();
                console.log('\nSWTH -> 0.1 ZIL\n');
                console.log(JSON.stringify(r3, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactOutput('SWTH', 'ZIL', someZIL)];
            case 18:
                tx5 = _g.sent();
                console.log("\ntx hash: " + tx5.hash + "\n");
                return [4 /*yield*/, waitForTx()
                    // get expected rates for exact output
                ];
            case 19:
                _g.sent();
                return [4 /*yield*/, zilswap.getRatesForOutput('ZIL', 'SWTH', someSWTH)];
            case 20:
                r4 = _g.sent();
                console.log('\nZIL -> 0.1 SWTH\n');
                console.log(JSON.stringify(r4, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactOutput('ZIL', 'SWTH', someSWTH)];
            case 21:
                tx6 = _g.sent();
                console.log("\ntx hash: " + tx6.hash + "\n");
                return [4 /*yield*/, waitForTx()];
            case 22:
                _g.sent();
                return [3 /*break*/, 25];
            case 23: return [4 /*yield*/, zilswap.teardown()];
            case 24:
                _g.sent();
                return [7 /*endfinally*/];
            case 25: return [2 /*return*/];
        }
    });
}); };
var test2 = function () { return __awaiter(void 0, void 0, void 0, function () {
    var tx0, _a, _b, _c, tx1, _d, _e, _f, pool, remove25Percent, tx2, someSWTH, someXSGD, r1, tx3, r2, tx4, r3, tx5, r4, tx6;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0: 
            // init
            return [4 /*yield*/, zilswap.initialize(printResults)
                // get app state
            ];
            case 1:
                // init
                _g.sent();
                // get app state
                console.log('\ninitial app state:\n');
                console.log(JSON.stringify(zilswap.getAppState(), null, 2));
                _g.label = 2;
            case 2:
                _g.trys.push([2, , 27, 29]);
                _b = (_a = zilswap).approveTokenTransferIfRequired;
                _c = ['XSGD'];
                return [4 /*yield*/, zilswap.toUnitless('XSGD', '100000')];
            case 3: return [4 /*yield*/, _b.apply(_a, _c.concat([_g.sent()]))];
            case 4:
                tx0 = _g.sent();
                if (!tx0) return [3 /*break*/, 6];
                console.log("\ntx hash: " + tx0.hash + "\n");
                return [4 /*yield*/, waitForTx()];
            case 5:
                _g.sent();
                _g.label = 6;
            case 6:
                _e = (_d = zilswap).addLiquidity;
                _f = ['XSGD'];
                return [4 /*yield*/, zilswap.toUnitless('ZIL', '100000')];
            case 7:
                _f = _f.concat([_g.sent()]);
                return [4 /*yield*/, zilswap.toUnitless('XSGD', '10000')];
            case 8: return [4 /*yield*/, _e.apply(_d, _f.concat([_g.sent()]))];
            case 9:
                tx1 = _g.sent();
                console.log("\ntx hash: " + tx1.hash + "\n");
                return [4 /*yield*/, waitForTx()
                    // remove liquidity
                ];
            case 10:
                _g.sent();
                pool = zilswap.getPool('XSGD');
                remove25Percent = pool.userContribution.dividedToIntegerBy(4).toString();
                return [4 /*yield*/, zilswap.removeLiquidity('XSGD', remove25Percent)];
            case 11:
                tx2 = _g.sent();
                console.log("\ntx hash: " + tx2.hash + "\n");
                return [4 /*yield*/, waitForTx()
                    // constants
                ];
            case 12:
                _g.sent();
                return [4 /*yield*/, zilswap.toUnitless('SWTH', '0.1')];
            case 13:
                someSWTH = _g.sent();
                return [4 /*yield*/, zilswap.toUnitless('XSGD', '0.1')
                    // get expected rates for exact input
                ];
            case 14:
                someXSGD = _g.sent();
                return [4 /*yield*/, zilswap.getRatesForInput('SWTH', 'XSGD', someSWTH)];
            case 15:
                r1 = _g.sent();
                console.log('\n0.1 SWTH -> XSGD\n');
                console.log(JSON.stringify(r1, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactInput('SWTH', 'XSGD', someSWTH)];
            case 16:
                tx3 = _g.sent();
                console.log("\ntx hash: " + tx3.hash + "\n");
                return [4 /*yield*/, waitForTx()
                    // get expected rates for exact input
                ];
            case 17:
                _g.sent();
                return [4 /*yield*/, zilswap.getRatesForInput('XSGD', 'SWTH', someXSGD)];
            case 18:
                r2 = _g.sent();
                console.log('\n0.1 XSGD -> SWTH\n');
                console.log(JSON.stringify(r2, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactInput('XSGD', 'SWTH', someXSGD)];
            case 19:
                tx4 = _g.sent();
                console.log("\ntx hash: " + tx4.hash + "\n");
                return [4 /*yield*/, waitForTx()
                    // get expected rates for exact output
                ];
            case 20:
                _g.sent();
                return [4 /*yield*/, zilswap.getRatesForOutput('SWTH', 'XSGD', someXSGD)];
            case 21:
                r3 = _g.sent();
                console.log('\nSWTH -> 0.1 XSGD\n');
                console.log(JSON.stringify(r3, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactOutput('SWTH', 'XSGD', someXSGD)];
            case 22:
                tx5 = _g.sent();
                console.log("\ntx hash: " + tx5.hash + "\n");
                return [4 /*yield*/, waitForTx()
                    // get expected rates for exact output
                ];
            case 23:
                _g.sent();
                return [4 /*yield*/, zilswap.getRatesForOutput('XSGD', 'SWTH', someSWTH)];
            case 24:
                r4 = _g.sent();
                console.log('\nXSGD -> 0.1 SWTH\n');
                console.log(JSON.stringify(r4, null, 2));
                return [4 /*yield*/, zilswap.swapWithExactOutput('XSGD', 'SWTH', someSWTH)];
            case 25:
                tx6 = _g.sent();
                console.log("\ntx hash: " + tx6.hash + "\n");
                return [4 /*yield*/, waitForTx()];
            case 26:
                _g.sent();
                return [3 /*break*/, 29];
            case 27: return [4 /*yield*/, zilswap.teardown()];
            case 28:
                _g.sent();
                return [7 /*endfinally*/];
            case 29: return [2 /*return*/];
        }
    });
}); };
var printResults = function (tx, status, receipt) {
    if (!receipt) {
        console.error("\ntx " + tx.hash + " failed with " + status + "!\n");
    }
    else if (status !== 'confirmed') {
        console.error("\ntx " + tx.hash + " failed with " + status + "!\ntx receipt: \n");
        console.error(JSON.stringify(receipt, null, 2));
    }
    else {
        console.log("\ntx " + tx.hash + " confirmed.\napp state:\n");
        console.log(JSON.stringify(zilswap.getAppState(), null, 2));
    }
};
var waitForTx = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve) {
                var check = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, zilswap.getObservedTxs()];
                            case 1:
                                if ((_a.sent()).length === 0) {
                                    resolve();
                                }
                                else {
                                    setTimeout(check, 100);
                                }
                                return [2 /*return*/];
                        }
                    });
                }); };
                check();
            })];
    });
}); };
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('test starting..');
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                // await test()
                return [4 /*yield*/, test2()];
            case 2:
                // await test()
                _a.sent();
                console.log('test done!');
                return [3 /*break*/, 4];
            case 3:
                err_1 = _a.sent();
                console.error(err_1);
                console.log('test failed!');
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); })();
//# sourceMappingURL=test.js.map