/// <reference types="bn.js" />
/// <reference types="long" />
import 'isomorphic-fetch';
import { Zilliqa } from '@zilliqa-js/zilliqa';
import { Wallet, TxReceipt as _TxReceipt } from '@zilliqa-js/account';
import { Contract } from '@zilliqa-js/contract';
import { BN, Long } from '@zilliqa-js/util';
import { BigNumber } from 'bignumber.js';
import { Network } from './constants';
export declare type Options = {
    deadlineBuffer?: number;
    gasPrice?: number;
    gasLimit?: number;
};
export declare type OnUpdate = (tx: ObservedTx, status: TxStatus, receipt?: TxReceipt) => void;
export declare type ObservedTx = {
    hash: string;
    deadline: number;
};
export declare type TxStatus = 'confirmed' | 'rejected' | 'expired';
export declare type TxReceipt = _TxReceipt;
export declare type TxParams = {
    version: number;
    gasPrice: BN;
    gasLimit: Long;
};
export declare type TokenDetails = {
    contract: Contract;
    address: string;
    hash: string;
    symbol: string;
    decimals: number;
    whitelisted: boolean;
};
export declare type ContractState = {
    _balance: string;
    balances: {
        [key in string]?: {
            [key2 in string]?: string;
        };
    };
    output_after_fee: string;
    owner: string;
    pending_owner: string;
    pools: {
        [key in string]?: {
            arguments: ReadonlyArray<string>;
        };
    };
    total_contributions: {
        [key in string]?: string;
    };
};
export declare type AppState = {
    contractState: ContractState;
    tokens: {
        [key in string]: TokenDetails;
    };
    pools: {
        [key in string]?: Pool;
    };
    currentUser: string | null;
    currentNonce: number | null;
    currentBalance: BigNumber | null;
};
export declare type Pool = {
    zilReserve: BigNumber;
    tokenReserve: BigNumber;
    exchangeRate: BigNumber;
    totalContribution: BigNumber;
    userContribution: BigNumber;
    contributionPercentage: BigNumber;
};
export declare type Rates = {
    expectedAmount: BigNumber;
    slippage: BigNumber;
};
export declare type WalletProvider = Omit<Zilliqa & {
    wallet: Wallet & {
        net: string;
        defaultAccount: {
            base16: string;
            bech32: string;
        };
    };
}, // ugly hack for zilpay non-standard API
'subscriptionBuilder'>;
export declare class Zilswap {
    readonly network: Network;
    private readonly zilliqa;
    private readonly walletProvider?;
    private readonly tokens;
    private appState?;
    private subscription;
    private observer;
    private observerMutex;
    private observedTxs;
    private deadlineBuffer;
    private currentBlock;
    readonly contract: Contract;
    readonly contractAddress: string;
    readonly contractHash: string;
    readonly _txParams: TxParams;
    /**
     * Creates the Zilswap SDK object. {@linkcode initalize} needs to be called after
     * the object is created to begin watching the blockchain's state.
     *
     * @param network the Network to use, either `TestNet` or `MainNet`.
     * @param walletProviderOrKey a Provider with Wallet or private key string to be used for signing txns.
     * @param options a set of Options that will be used for all txns.
     */
    constructor(network: Network, walletProviderOrKey?: WalletProvider | string, options?: Options);
    /**
     * Intializes the SDK, fetching a cache of the Zilswap contract state and
     * subscribing to subsequent state changes. You may optionally pass an array
     * of ObservedTx's to subscribe to status changes on any of those txs.
     *
     * @param subscription is the callback function to call when a tx state changes.
     * @param observedTx is the array of txs to observe.
     */
    initialize(subscription?: OnUpdate, observeTxs?: ObservedTx[]): Promise<void>;
    /**
     * Stops watching the Zilswap contract state.
     */
    teardown(): Promise<void>;
    /**
     * Gets the latest Zilswap app state.
     */
    getAppState(): AppState;
    /**
     * Gets the pool details for the given `tokenID`.
     *
     * @param tokenID is the token ID for the pool, which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...).
     * @returns {Pool} if pool exists, or `null` otherwise.
     */
    getPool(tokenID: string): Pool | null;
    /**
     * Gets the currently observed transactions.
     */
    getObservedTxs(): Promise<ObservedTx[]>;
    /**
     * Converts an amount to it's unitless representation (integer, no decimals) from it's
     * human representation (with decimals based on token contract, or 12 decimals for ZIL).
     * @param tokenID is the token ID related to the conversion amount, which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param amountHuman is the amount as a human string (e.g. 4.2 for 4.2 ZILs) to be converted.
     */
    toUnitless(tokenID: string, amountHuman: string): string;
    /**
     * Converts an amount to it's human representation (with decimals based on token contract, or 12 decimals for ZIL)
     * from it's unitless representation (integer, no decimals).
     * @param tokenID is the token ID related to the conversion amount, which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param amountStr is the unitless amount as a string (e.g. 42000000000000 for 42 ZILs) to be converted.
     */
    toUnit(tokenID: string, amountStr: string): string;
    /**
     * Gets the expected output amount and slippage for a particular set of ZRC-2 or ZIL tokens at the given input amount.
     *
     * @param tokenInID is the token ID to be sent to Zilswap (sold), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenOutID is the token ID to be taken from Zilswap (bought), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenInAmountStr is the exact amount of tokens to be sent to Zilswap as a unitless representable string (without decimals).
     */
    getRatesForInput(tokenInID: string, tokenOutID: string, tokenInAmountStr: string): Rates;
    /**
     * Gets the expected input amount and slippage for a particular set of ZRC-2 or ZIL tokens at the given output amount.
     * Returns NaN values if the given output amount is larger than the pool reserve.
     *
     * @param tokenInID is the token ID to be sent to Zilswap (sold), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenOutID is the token ID to be taken from Zilswap (bought), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenOutAmountStr is the exact amount of tokens to be received from Zilswap as a unitless representable string (without decimals).
     */
    getRatesForOutput(tokenInID: string, tokenOutID: string, tokenOutAmountStr: string): Rates;
    /**
     * Sets the number of blocks to use as the allowable buffer duration before transactions
     * are considered invalid.
     *
     * When a transaction is signed, the deadline block by adding the buffer blocks to
     * the latest confirmed block height.
     *
     * @param bufferBlocks is the number of blocks to use as buffer for the deadline block.
     */
    setDeadlineBlocks(bufferBlocks: number): void;
    /**
     * Observes the given transaction until the deadline block.
     *
     * Calls the `OnUpdate` callback given during `initialize` with the updated ObservedTx
     * when a change has been observed.
     *
     * @param observedTx is the txn hash of the txn to observe with the deadline block number.
     */
    observeTx(observedTx: ObservedTx): Promise<void>;
    /**
     * Adds a token which is not already loaded by the default tokens file to the SDK.
     * @param tokenAddress is the token address in base16 (0x...) or bech32 (zil...) form.
     *
     * @returns true if the token could be found, or false otherwise.
     */
    addToken(tokenAddress: string): Promise<boolean>;
    /**
     * Approves allowing the Zilswap contract to transfer ZRC-2 token with `tokenID`, if the current
     * approved allowance is less than `amount`. If the allowance is sufficient, this method is a no-op.
     *
     * The approval is done by calling `IncreaseAllowance` with the allowance amount as the entire
     * token supply. This is done so that the approval needs to only be done once per token contract,
     * reducing the number of approval transactions required for users conducting multiple swaps.
     *
     * Non-custodial control of the token is ensured by the Zilswap contract itself, which does not
     * allow for the transfer of tokens unless explicitly invoked by the sender.
     *
     * The transaction is added to the list of observedTxs, and the observer will be notified on
     * a confirmation or rejection event. The transation will be assumed to be expired after the default
     * deadline buffer, even though there is no deadline block for this transaction.
     *
     * @param tokenID is the token ID for the pool, which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...).
     * @param amountStrOrBN is the required allowance amount the Zilswap contract requires, below which the
     * `IncreaseAllowance` transition is invoked, as a unitless string or BigNumber.
     *
     * @returns an ObservedTx if IncreaseAllowance was called, null if not.
     */
    approveTokenTransferIfRequired(tokenID: string, amountStrOrBN: BigNumber | string): Promise<ObservedTx | null>;
    /**
     * Adds liquidity to the pool with the given `tokenID`. The given `zilsToAddHuman` represents the exact quantity of ZIL
     * that will be contributed, while the given `tokensToAddHuman` represents the target quantity of ZRC-2 tokens to be
     * contributed.
     *
     * To ensure the liquidity contributor does not lose value to arbitrage, the target token amount should be strictly
     * derived from the current exchange rate that can be found using {@linkcode getPool}.
     *
     * The maximum fluctuation in exchange rate from the given parameters can be controlled through `maxExchangeRateChange`,
     * to protect against changes in pool reserves between the txn submission and txn confirmation on the Zilliqa blockchain.
     *
     * If the pool has no liquidity yet, the token amount given will be the exact quantity of tokens that will be contributed,
     * and the `maxExchangeRateChange` is ignored.
     *
     * The transaction is added to the list of observedTxs, and the observer will be notified on change in tx status.
     *
     * Note that all amounts should be given with decimals in it's human represented form, rather than as a unitless integer.
     *
     * @param tokenID is the token ID for the pool, which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...).
     * @param zilsToAddStr is the exact amount of zilliqas to contribute to the pool in ZILs as a unitless string.
     * @param tokensToAddStr is the target amount of tokens to contribute to the pool as a unitless string.
     * @param maxExchangeRateChange is the maximum allowed exchange rate flucuation
     * given in {@link https://www.investopedia.com/terms/b/basispoint.asp basis points}. Defaults to 200 = 2.00% if not provided.
     */
    addLiquidity(tokenID: string, zilsToAddStr: string, tokensToAddStr: string, maxExchangeRateChange?: number): Promise<ObservedTx>;
    /**
     * Removes `contributionAmount` worth of liquidity from the pool with the given `tokenID`.
     *
     * The current user's contribution can be fetched in {@linkcode getPool}, and the expected returned amounts at the
     * current prevailing exchange rates can be calculated by prorating the liquidity pool reserves by the fraction of
     * the user's current contribution against the pool's total contribution.
     *
     * The maximum fluctuation in exchange rate from the given parameters can be controlled through `maxExchangeRateChange`,
     * to protect against changes in pool reserves between the txn submission and txn confirmation on the Zilliqa blockchain.
     *
     * The transaction is added to the list of observedTxs, and the observer will be notified on change in tx status.
     *
     * @param tokenID is the token ID for the pool, which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...).
     * @param contributionAmount is the exact amount of zilliqas to contribute to the pool in ZILs as a string.
     * @param maxExchangeRateChange is the maximum allowed exchange rate flucuation
     * given in {@link https://www.investopedia.com/terms/b/basispoint.asp basis points}. Defaults to 200 = 2.00% if not provided.
     */
    removeLiquidity(tokenID: string, contributionAmount: string, maxExchangeRateChange?: number): Promise<ObservedTx>;
    /**
     * Swaps ZIL or a ZRC-2 token with `tokenInID` for a corresponding ZIL or ZRC-2 token with `tokenOutID`.
     *
     * The exact amount of ZIL or ZRC-2 to be sent in (sold) is `tokenInAmountHuman`. The amount received is determined by the prevailing
     * exchange rate at the current AppState. The expected amount to be received can be given fetched by getExpectedOutput (NYI).
     *
     * The maximum additional slippage incurred due to fluctuations in exchange rate from when the
     * transaction is signed and when it is processed by the Zilliqa blockchain can be bounded by the
     * `maxAdditionalSlippage` variable.
     *
     * The transaction is added to the list of observedTxs, and the observer will be notified on change in tx status.
     *
     * @param tokenInID is the token ID to be sent to Zilswap (sold), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenOutID is the token ID to be taken from Zilswap (bought), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenInAmountStr is the exact amount of tokens to be sent to Zilswap as a unitless string (without decimals).
     * @param maxAdditionalSlippage is the maximum additional slippage (on top of slippage due to constant product formula) that the
     * transition will allow before reverting.
     * @param recipientAddress is an optional recipient address for receiving the output of the swap in base16 (0x...) or bech32 (zil...).
     * Defaults to the sender address if `null` or undefined.
     */
    swapWithExactInput(tokenInID: string, tokenOutID: string, tokenInAmountStr: string, maxAdditionalSlippage?: number, recipientAddress?: string | null): Promise<ObservedTx>;
    /**
     * Swaps ZIL or a ZRC-2 token with `tokenInID` for a corresponding ZIL or ZRC-2 token with `tokenOutID`.
     *
     * The exact amount of ZIL or ZRC-2 to be received (bought) is `tokenOutAmountHuman`. The amount sent is determined by the prevailing
     * exchange rate at the current AppState. The expected amount to be sent can be given fetched by getExpectedInput (NYI).
     *
     * The maximum additional slippage incurred due to fluctuations in exchange rate from when the
     * transaction is signed and when it is processed by the Zilliqa blockchain can be bounded by the
     * `maxAdditionalSlippage` variable.
     *
     * The transaction is added to the list of observedTxs, and the observer will be notified on change in tx status.
     *
     * @param tokenInID is the token ID to be sent to Zilswap (sold), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenOutID is the token ID to be taken from Zilswap (bought), which can be given by either it's symbol (defined in constants.ts),
     * hash (0x...) or bech32 address (zil...). The hash for ZIL is represented by the ZIL_HASH constant.
     * @param tokenOutAmountStr is the exact amount of tokens to be received from Zilswap as a unitless string (withoout decimals).
     * @param maxAdditionalSlippage is the maximum additional slippage (on top of slippage due to constant product formula) that the
     * transition will allow before reverting.
     * @param recipientAddress is an optional recipient address for receiving the output of the swap in base16 (0x...) or bech32 (zil...).
     * Defaults to the sender address if `null` or undefined.
     */
    swapWithExactOutput(tokenInID: string, tokenOutID: string, tokenOutAmountStr: string, maxAdditionalSlippage?: number, recipientAddress?: string | null): Promise<ObservedTx>;
    private getInputs;
    private getOutputs;
    private getInputFor;
    private getOutputFor;
    private getAfterFeeBps;
    private getReserves;
    private callContract;
    private subscribeToAppChanges;
    private loadTokenList;
    private updateBlockHeight;
    private updateAppState;
    private updateBalanceAndNonce;
    private updateObservedTxs;
    private parseRecipientAddress;
    private getTokenAddresses;
    private getTokenDetails;
    private fetchTokenDetails;
    private checkAllowedBalance;
    private checkAppLoadedWithUser;
    private txParams;
    private deadlineBlock;
    private nonce;
    private validateMaxExchangeRateChange;
}
//# sourceMappingURL=index.d.ts.map