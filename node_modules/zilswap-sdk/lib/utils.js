"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@zilliqa-js/util");
// The following code is based on: @zilliqa-js/util/src/unit.ts.
// toPositiveQa is modified from toQa to accept arbitrary number units,
// while not accepting negative inputs.
var unitMap = new Map([
    [util_1.units.Units.Qa, '1'],
    [util_1.units.Units.Li, '1000000'],
    [util_1.units.Units.Zil, '1000000000000'],
]);
var numToStr = function (input) {
    if (typeof input === 'string') {
        if (!input.match(/^-?[0-9.]+$/)) {
            throw new Error("while converting number to string, invalid number value '" + input + "', should be a number matching (^[0-9.]+).");
        }
        return input;
    }
    else if (typeof input === 'number') {
        return String(input);
    }
    else if (util_1.BN.isBN(input)) {
        return input.toString(10);
    }
    throw new Error("while converting number to string, invalid number value '" + input + "' type " + typeof input + ".");
};
exports.toPositiveQa = function (input, unitOrDecimals) {
    var inputStr = numToStr(input);
    var base;
    var baseNumDecimals;
    if (typeof unitOrDecimals === 'number') {
        // decimals
        if (unitOrDecimals < 0 || unitOrDecimals % 1 !== 0) {
            throw new Error("Invalid decimals " + unitOrDecimals + ", must be non-negative integer.");
        }
        baseNumDecimals = unitOrDecimals;
        base = new util_1.BN(10).pow(new util_1.BN(baseNumDecimals));
    }
    else {
        // unit
        var baseStr = unitMap.get(unitOrDecimals);
        if (!baseStr) {
            throw new Error("No unit of type " + unitOrDecimals + " exists.");
        }
        baseNumDecimals = baseStr.length - 1;
        base = new util_1.BN(baseStr, 10);
    }
    if (inputStr === '.') {
        throw new Error("Cannot convert " + inputStr + " to Qa.");
    }
    // Split it into a whole and fractional part
    var comps = inputStr.split('.');
    if (comps.length > 2) {
        throw new Error("Cannot convert " + inputStr + " to Qa.");
    }
    var whole = comps[0], fraction = comps[1];
    if (!whole) {
        whole = '0';
    }
    if (!fraction) {
        fraction = '0';
    }
    if (fraction.length > baseNumDecimals) {
        console.log(fraction.length, baseNumDecimals);
        throw new Error("Cannot convert " + inputStr + " to Qa.");
    }
    while (fraction.length < baseNumDecimals) {
        fraction += '0';
    }
    var wholeBN = new util_1.BN(whole);
    var fractionBN = new util_1.BN(fraction);
    var qa = wholeBN.mul(base).add(fractionBN);
    return new util_1.BN(qa.toString(10), 10);
};
//# sourceMappingURL=utils.js.map